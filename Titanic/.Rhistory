Medians$cancerType = sapply(Medians$cancerType, FUN = function(x) cancerNaming[[x]])
long.samp <- melt(Medians, id = 'cancerType')
names(long.samp) <- c("Cancer", "Gene", "value")
#head(long.samp)
myPalette <- colorRampPalette(rev(brewer.pal(11, "Spectral")), space="Lab")
p1 = ggplot(aes(y = Cancer, x = Gene, fill = value),
data = long.samp) +
scale_fill_gradientn(colours = myPalette(20)) +
geom_tile()  + ylab("") + xlab("") +
theme_minimal(base_size = 16)
if (save)
{ggsave(paste(file_name, '.jpg', sep = ''), plot = p1, path = loc, width = 9, height = 6)}
return(p1)
}
Median_Heatmaps(gene_list, save = 'FALSE')
#Create Heat Map of supplied gene list using Gene_Medians to extract medians
Median_Heatmaps = function(gene_list, group = 'cancerType', flip = FALSE,
loc = '~/Dropbox/ChemoCentryx/Cancer Immunotherapy/Bioinformatics/TCGA analysis/Clustering',
file_name = 'test', save = 'FALSE')
{
library(reshape2)
library(ggplot2)
library(plyr)
library(RColorBrewer)
cancerNaming = list('Prostate adenocarcinoma' = 'Prostate', 'Brain Lower Grade Glioma' = 'Glioma', 'Breast invasive carcinoma' = 'Breast', 'Colon adenocarcinoma' = 'Colon', 'Glioblastoma multiforme' = 'Glioblastoma', 'Head and Neck squamous cell carcinoma' = 'Head and Neck', 'Kidney renal clear cell carcinoma' = 'Kidney RCC', 'Liver hepatocellular carcinoma' = 'HCC', 'Lung adenocarcinoma' = 'Lung', 'Lung squamous cell carcinoma' = 'Lung SCC', 'Pancreatic adenocarcinoma' = 'Pancreatic', 'Sarcoma' = 'Sarcoma', 'Skin Cutaneous Melanoma' = 'Melanoma')
first = TRUE
for (gene in gene_list)
{
gene_med = Gene_Medians(gene, group)
if (length(gene_med$cancerType > 0))
{
if (first)
{Medians = gene_med}
else
{Medians = merge(Medians, gene_med)}
first = FALSE
Big_Disconn()
}
}
Medians$cancerType = sapply(Medians$cancerType, FUN = function(x) cancerNaming[[x]])
long.samp <- melt(Medians, id = 'cancerType')
names(long.samp) <- c("Cancer", "Gene", "value")
#head(long.samp)
myPalette <- colorRampPalette(rev(brewer.pal(11, "Spectral")), space="Lab")
if (flip)
{
p1 = ggplot(aes(y = Cancer, x = Gene, fill = value),
data = long.samp)
}
else
{
p1 = ggplot(aes(x = Cancer, y = Gene, fill = value),
data = long.samp)
}
p1 + scale_fill_gradientn(colours = myPalette(20)) + geom_tile()  +
ylab("") + xlab("") + theme_minimal(base_size = 16)
if (save)
{ggsave(paste(file_name, '.jpg', sep = ''), plot = p1, path = loc, width = 9, height = 6)}
return(p1)
}
Median_Heatmaps(gene_list, flip = TRUE, save = 'FALSE')
#Create Heat Map of supplied gene list using Gene_Medians to extract medians
Median_Heatmaps = function(gene_list, group = 'cancerType', flip = FALSE,
loc = '~/Dropbox/ChemoCentryx/Cancer Immunotherapy/Bioinformatics/TCGA analysis/Clustering',
file_name = 'test', save = 'FALSE')
{
library(reshape2)
library(ggplot2)
library(plyr)
library(RColorBrewer)
cancerNaming = list('Prostate adenocarcinoma' = 'Prostate', 'Brain Lower Grade Glioma' = 'Glioma', 'Breast invasive carcinoma' = 'Breast', 'Colon adenocarcinoma' = 'Colon', 'Glioblastoma multiforme' = 'Glioblastoma', 'Head and Neck squamous cell carcinoma' = 'Head and Neck', 'Kidney renal clear cell carcinoma' = 'Kidney RCC', 'Liver hepatocellular carcinoma' = 'HCC', 'Lung adenocarcinoma' = 'Lung', 'Lung squamous cell carcinoma' = 'Lung SCC', 'Pancreatic adenocarcinoma' = 'Pancreatic', 'Sarcoma' = 'Sarcoma', 'Skin Cutaneous Melanoma' = 'Melanoma')
first = TRUE
for (gene in gene_list)
{
gene_med = Gene_Medians(gene, group)
if (length(gene_med$cancerType > 0))
{
if (first)
{Medians = gene_med}
else
{Medians = merge(Medians, gene_med)}
first = FALSE
Big_Disconn()
}
}
Medians$cancerType = sapply(Medians$cancerType, FUN = function(x) cancerNaming[[x]])
long.samp <- melt(Medians, id = 'cancerType')
names(long.samp) <- c("Cancer", "Gene", "value")
#head(long.samp)
myPalette <- colorRampPalette(rev(brewer.pal(11, "Spectral")), space="Lab")
if (flip)
{
p1 = ggplot(aes(y = Cancer, x = Gene, fill = value),
data = long.samp) +
scale_fill_gradientn(colours = myPalette(20)) + geom_tile() +
ylab("") + xlab("") + theme_minimal(base_size = 16)
}
else
{
p1 = ggplot(aes(x = Cancer, y = Gene, fill = value),
data = long.samp) +
scale_fill_gradientn(colours = myPalette(20)) + geom_tile() +
ylab("") + xlab("") + theme_minimal(base_size = 16)
}
if (save)
{ggsave(paste(file_name, '.jpg', sep = ''), plot = p1, path = loc, width = 9, height = 6)}
return(p1)
}
#Create Heat Map of supplied gene list using Gene_Medians to extract medians
Median_Heatmaps = function(gene_list, group = 'cancerType', flip = FALSE,
loc = '~/Dropbox/ChemoCentryx/Cancer Immunotherapy/Bioinformatics/TCGA analysis/Clustering',
file_name = 'test', save = 'FALSE')
{
library(reshape2)
library(ggplot2)
library(plyr)
library(RColorBrewer)
first = TRUE
for (gene in gene_list)
{
gene_med = Gene_Medians(gene, group)
if (length(gene_med$cancerType > 0))
{
if (first)
{Medians = gene_med}
else
{Medians = merge(Medians, gene_med)}
first = FALSE
Big_Disconn()
}
}
if (group == 'cancerType')
{
cancerNaming = list('Prostate adenocarcinoma' = 'Prostate', 'Brain Lower Grade Glioma' = 'Glioma', 'Breast invasive carcinoma' = 'Breast', 'Colon adenocarcinoma' = 'Colon', 'Glioblastoma multiforme' = 'Glioblastoma', 'Head and Neck squamous cell carcinoma' = 'Head and Neck', 'Kidney renal clear cell carcinoma' = 'Kidney RCC', 'Liver hepatocellular carcinoma' = 'HCC', 'Lung adenocarcinoma' = 'Lung', 'Lung squamous cell carcinoma' = 'Lung SCC', 'Pancreatic adenocarcinoma' = 'Pancreatic', 'Sarcoma' = 'Sarcoma', 'Skin Cutaneous Melanoma' = 'Melanoma')
Medians$cancerType = sapply(Medians$cancerType, FUN = function(x) cancerNaming[[x]])
}
long.samp <- melt(Medians, id = group)
names(long.samp) <- c("Cancer", "Gene", "value")
#head(long.samp)
myPalette <- colorRampPalette(rev(brewer.pal(11, "Spectral")), space="Lab")
if (flip)
{
p1 = ggplot(aes(y = Cancer, x = Gene, fill = value),
data = long.samp) +
scale_fill_gradientn(colours = myPalette(20)) + geom_tile() +
ylab("") + xlab("") + theme_minimal(base_size = 16)
}
else
{
p1 = ggplot(aes(x = Cancer, y = Gene, fill = value),
data = long.samp) +
scale_fill_gradientn(colours = myPalette(20)) + geom_tile() +
ylab("") + xlab("") + theme_minimal(base_size = 16)
}
if (save)
{ggsave(paste(file_name, '.jpg', sep = ''), plot = p1, path = loc, width = 9, height = 6)}
return(p1)
}
Median_Heatmaps(gene_list, flip = TRUE, save = 'FALSE')
remove(list = ls())
SQL_genes = function(genes, commands)
{
for (i in 1:length(genes))
{
commands$from = paste(commands$from, 'INNER JOIN GeneExp as g', i, ' \n ', sep = '')
commands$select = paste(commands$select, ', \n ', 'g', i, '.exp_level as ', genes[i], sep = '')
commands$on = paste(commands$on, ' AND \n g', i, '.bar_id = Barcodes.bar_id ', sep = '')
commands$where = paste(commands$where, ' AND \n g', i, '.gene_id = "', genes[i], '" ', sep = '')
}
return(commands)
}
#add calls to pre-existing SELECT, FROM, ON, and WHERE commands held in commands to clinical_features in clinical_set table
SQL_clin = function(clinical_features, clinical_set, commands)
{
for (i in 1:length(clinical_features))
{
if (i == 1) {
commands$from = paste(commands$from, '\n INNER JOIN  ', clinical_set, ' \n ', sep = '')
commands$on = paste(commands$on, ' AND \n ', clinical_set, '.pat_id = Barcodes.pat_id ', sep = '')}
commands$select = paste(commands$select, ', \n ', clinical_features[i], ' ', sep = '')
}
return(commands)
}
#use commands to return table in test database from user root on localhost
SQL_querry = function(command)
{
if(mysqlHasDefault()) {
mydb = dbConnect(RMySQL::MySQL(), user = 'root', host = 'localhost', dbname = 'test')
table = dbGetQuery(mydb, paste(command, ';', sep = ''))
dbDisconnect(mydb)
}
return(table)
}
#Automated writing of MySQL command for a list of genes and cliical_features from clinical table (clinical_set)
GeneClin_SQL = function(genes = c(), clinical_set = '', clinical_features = c(), cancer = '', tissue = '', test = FALSE, cmd_only = TRUE)
{
library(RMySQL)
#define initial commands, always compare back to bar_id in Barcodes
#define columns to be selected, always include SampleType, pat.id, cancerType and cancerAb
select_cmd = 'SELECT SampleType , Patients.pat_id , Patients.cancerType , Patients.cancerAb'
#define tables to choose from, always include Barcodes to match on and Patients to define cancerAb if desired
from_cmd = 'FROM Barcodes INNER JOIN Patients '
#define columns to join on always include pat_id between barcodes and patients
on_cmd = 'ON Barcodes.pat_id = Patients.pat_id '
#define what to select in each table include selection on RNA related barcodes only
where_cmd = "WHERE Barcodes.bar_id LIKE '%-__R-%' "
commands = list('select' = select_cmd, 'from' = from_cmd, 'on' = on_cmd, 'where' = where_cmd)
#add clinical_features to commands
if (length(clinical_features) > 0)
{commands = SQL_clin(clinical_features, clinical_set, commands)}
#add genes if the list contains genes
if (length(genes) > 0)
{commands = SQL_genes(genes, commands)}
#break down by cancer type if cancerAb is given
if (nchar(cancer) > 0)
{commands$where = paste(commands$where, ' AND \n Patients.cancerAb = "', cancer, '" ', sep = '')}
if (nchar(tissue) > 0)
{commands$where = paste(commands$where, ' AND \n SampleType = "', tissue, '" ', sep = '')}
command = paste(commands$select, commands$from, commands$on, commands$where, sep = ' ')
if (cmd_only) {return(command)}
else {return(SQL_querry(command))}
}
#Calculates the median of a single gene separately for each cancer type
#returns table of medians for gene
Gene_Medians = function(gene, group = 'cancerType', tissue = 'primary tumor',
clinical_set = '', clinical_features = c(), cancer = '',
test = FALSE)
{
cmd1 = paste("SELECT ", group, " , AVG(", gene,") AS ", gene, sep = '')
cmd2 = paste("FROM (SELECT ", group, " , ", gene,
" FROM (SELECT @a := (@a + 1) mod o.count AS shifted_n,
IF(@a mod o.count=0, o.count, @a) AS n, o.", group, " , o.", gene, " , o.count", sep = '')
cmd3 = paste("FROM (SELECT t_o.", group, " , ", gene, " , count
FROM (", sep = '')
cmd4 = GeneClin_SQL(genes = gene, tissue = tissue, clinical_set = clinical_set, clinical_features = clinical_features, cancer = cancer, tissue = tissue)
cmd5 = paste(") t_o INNER JOIN (SELECT ", group, " , COUNT(*) AS count FROM (", sep = '')
#cmd6 = GeneClin_SQL(genes = gene, tissue = tissue)
cmd7 = paste(") t_1 GROUP BY  ", group, " ) t2 ON (t2.", group, " = t_o.", group,
") ORDER BY t_o.", group, " , ", gene, ") o) a WHERE n in (floor((count + 1)/2),
floor((count+2)/2))) a GROUP BY ", group, ";", sep = '')
command = paste(cmd1, cmd2, cmd3, cmd4, cmd5, cmd4, cmd7, sep = ' ')
if (test){print(command)}
if(mysqlHasDefault()) {
mydb = dbConnect(RMySQL::MySQL(), user = 'root', host = 'localhost', dbname = 'test')
dbGetQuery(mydb, "SELECT @a := 0;")
table = dbGetQuery(mydb, command)
dbDisconnect(mydb)
}
return(table)
}
Median_Heatmaps = function(gene_list, group = 'cancerType', flip = FALSE,
clinical_set = '', clinical_features = c(), cancer = '',
loc = '~/Dropbox/ChemoCentryx/Cancer Immunotherapy/Bioinformatics/TCGA analysis/Clustering',
file_name = 'test', save = 'FALSE')
{
library(reshape2)
library(ggplot2)
library(plyr)
library(RColorBrewer)
first = TRUE
for (gene in gene_list)
{
gene_med = Gene_Medians(gene, group)
if (length(gene_med$cancerType > 0))
{
if (first)
{Medians = gene_med}
else
{Medians = merge(Medians, gene_med)}
first = FALSE
Big_Disconn()
}
}
if (group == 'cancerType')
{
cancerNaming = list('Prostate adenocarcinoma' = 'Prostate', 'Brain Lower Grade Glioma' = 'Glioma', 'Breast invasive carcinoma' = 'Breast', 'Colon adenocarcinoma' = 'Colon', 'Glioblastoma multiforme' = 'Glioblastoma', 'Head and Neck squamous cell carcinoma' = 'Head and Neck', 'Kidney renal clear cell carcinoma' = 'Kidney RCC', 'Liver hepatocellular carcinoma' = 'HCC', 'Lung adenocarcinoma' = 'Lung', 'Lung squamous cell carcinoma' = 'Lung SCC', 'Pancreatic adenocarcinoma' = 'Pancreatic', 'Sarcoma' = 'Sarcoma', 'Skin Cutaneous Melanoma' = 'Melanoma')
Medians$cancerType = sapply(Medians$cancerType, FUN = function(x) cancerNaming[[x]])
}
long.samp <- melt(Medians, id = group)
names(long.samp) <- c("Cancer", "Gene", "value")
#head(long.samp)
myPalette <- colorRampPalette(rev(brewer.pal(11, "Spectral")), space="Lab")
if (flip)
{
p1 = ggplot(aes(y = Cancer, x = Gene, fill = value),
data = long.samp) +
scale_fill_gradientn(colours = myPalette(20)) + geom_tile() +
ylab("") + xlab("") + theme_minimal(base_size = 16)
}
else
{
p1 = ggplot(aes(x = Cancer, y = Gene, fill = value),
data = long.samp) +
scale_fill_gradientn(colours = myPalette(20)) + geom_tile() +
ylab("") + xlab("") + theme_minimal(base_size = 16)
}
if (save)
{ggsave(paste(file_name, '.jpg', sep = ''), plot = p1, path = loc, width = 9, height = 6)}
return(p1)
}
Big_Disconn = function()
{
all_cons = dbListConnections(MySQL())
for(con in all_cons)
{dbDisconnect(con)}
print(dbListConnections(MySQL()))
}
CKR_list = scan("~/Dropbox/ChemoCentryx/Cancer Immunotherapy/Bioinformatics/GeneLists/ChemokineReceptors.txt", what="", sep="\n")
Gene_Medians = function(CKR_list, group = 'Mol_Subtype', tissue = 'primary tumor',
clinical_set = 'BCmsubtype', clinical_features = c(Mol_Subtype), cancer = 'BRCA',
test = FALSE)
)
Gene_Medians = function(CKR_list, group = 'Mol_Subtype', tissue = 'primary tumor',
clinical_set = 'BCmsubtype', clinical_features = c(Mol_Subtype), cancer = 'BRCA',
test = FALSE)
)
Gene_Medians(CKR_list, group = 'Mol_Subtype', tissue = 'primary tumor',
clinical_set = 'BCmsubtype', clinical_features = c(Mol_Subtype), cancer = 'BRCA',
test = FALSE)
Gene_Medians(CKR_list, group = 'Mol_Subtype', tissue = 'primary tumor',
clinical_set = 'BCmsubtype', clinical_features = c(Mol_Subtype),
cancer = 'BRCA', test = FALSE)
Gene_Medians(CKR_list, group = 'cancerType', tissue = 'primary tumor',
clinical_set = '', clinical_features = c(), cancer = '',
test = FALSE)
Gene_Medians = function(gene, group = 'cancerType', tissue = 'primary tumor',
clinical_set = '', clinical_features = c(), cancer = '',
test = FALSE)
{
cmd1 = paste("SELECT ", group, " , AVG(", gene,") AS ", gene, sep = '')
cmd2 = paste("FROM (SELECT ", group, " , ", gene,
" FROM (SELECT @a := (@a + 1) mod o.count AS shifted_n,
IF(@a mod o.count=0, o.count, @a) AS n, o.", group, " , o.", gene, " , o.count", sep = '')
cmd3 = paste("FROM (SELECT t_o.", group, " , ", gene, " , count
FROM (", sep = '')
cmd4 = GeneClin_SQL(genes = gene, tissue = tissue, clinical_set = clinical_set, clinical_features = clinical_features, cancer = cancer)
cmd5 = paste(") t_o INNER JOIN (SELECT ", group, " , COUNT(*) AS count FROM (", sep = '')
#cmd6 = GeneClin_SQL(genes = gene, tissue = tissue)
cmd7 = paste(") t_1 GROUP BY  ", group, " ) t2 ON (t2.", group, " = t_o.", group,
") ORDER BY t_o.", group, " , ", gene, ") o) a WHERE n in (floor((count + 1)/2),
floor((count+2)/2))) a GROUP BY ", group, ";", sep = '')
command = paste(cmd1, cmd2, cmd3, cmd4, cmd5, cmd4, cmd7, sep = ' ')
if (test){print(command)}
if(mysqlHasDefault()) {
mydb = dbConnect(RMySQL::MySQL(), user = 'root', host = 'localhost', dbname = 'test')
dbGetQuery(mydb, "SELECT @a := 0;")
table = dbGetQuery(mydb, command)
dbDisconnect(mydb)
}
return(table)
}
Gene_Medians(CKR_list, group = 'cancerType', tissue = 'primary tumor',
clinical_set = '', clinical_features = c(), cancer = '',
test = FALSE)
Gene_Medians('CCR1', group = 'Mol_Subtype', tissue = 'primary tumor',
clinical_set = 'BCmsubtype', clinical_features = c(Mol_Subtype), cancer = 'BRCA',
test = FALSE)
Gene_Medians('CCR1', group = 'Mol_Subtype', tissue = 'primary tumor',
clinical_set = 'BCmsubtype', clinical_features = c(Mol_Subtype), cancer = 'BRCA',
test = TRUE)
setwd("~/code/kaggle challenges/Titanic")   #set working directory
setwd("~/code/Kaggle-Challenges/Titanic")   #set working directory
train <- read.csv('~/code/Kaggle-Challenges/Titanic/train.csv')
View(train)
test <- read.csv("~/code/Kaggle-Challenges/Titanic/test.csv")
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = 'class')
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = 'class')
plot(fit)
text(fit)
View(train)
?glm
?family
family=binomial(link = "logit"))
fit = glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, family=binomial(link = "logit"))
plot(fit)
fit <- glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, family=binomial(link = "logit"))
summary(fit)
exp(-2.6)
1/exp(-2.6)
1/exp(2.6)
fit <- glm(Survived ~ Pclass, data=train, family=binomial(link = "logit"))
summary(fit)
summary(train$Pclass
)
fit <- glm(Survived ~ factor(Pclass), data=train, family=binomial(link = "logit"))
summary(fit)
inv.logit <- function(x){1/(1+exp(-x))}
curve(inv.logit(x),-4,4)
abline(h=0.5)
curve(inv.logit(x),-4,4)
abline(v=0.5)
inv.logit(0.5)
exp(0.5)
class.coef <- coef(fit)
class.coef
new.data <- data.frame(class=c(1,2,3))
new.data
new.data <- data.frame(class=c(1,2,3))
model.matrix(formula.class, data=train)
formula.class <- as.formula(Survived ~ factor(Pclass))
model.matrix(formula.class, data=train)
model.matrix(formula.class, data=newdata)
model.matrix(formula.class, data=new.data)
new.data <- data.frame(Survived=1,class=c(1,2,3))
formula.class <- as.formula(Survived ~ factor(Pclass))
model.matrix(formula.class, data=new.data)
new.data <- data.frame(Survived=1, Pclass=c(1,2,3))
formula.class <- as.formula(Survived ~ factor(Pclass))
model.matrix(formula.class, data=new.data)
coef.class
class.coef
model.matrix(formula.class, data=new.data) %*% coef.class
model.matrix(formula.class, data=new.data) %*% class.coef
new.data
model.matrix(formula.class, data=new.data)
class.coef
history()
model.matrix(formula.class, data=new.data) %*% class.coef
class.coef
X <- model.matrix(formula.class, data=new.data)
X %*% class.coef
lp.classy <- as.vector(X %*% class.coef)
lp <- fitted(new.data, fit)
lp
lp <- predict(new.data, fit)
?fitted
?predict.glm
lp <- predict(fit, new.data)
lp
X <- model.matrix(formula.class, data=new.data)
X
lp
inv.logit(lp)
exp(lp)
class.coef
fit <- glm(formula.class, data=train, family=binomial(link = "logit"))
summary(fit)
?fitted
?fitted.glm
?predict.glm
?predict
?predict.glm
lp <- predict(fit, new.data, se.fit = TRUE)
lp
new.data
fit_2 <- glm(Survived ~ factor(Pclass) + factor(Sex), data = train, family = binomial(link = "logit"))
summary(fit_2)
new.data <- data.frame(Survived=1, Pclass=c(1,2,3), Sex=c(male, female))
new.data <- data.frame(Survived=1, Pclass=c(1,2,3), Sex=c('male', 'female'))
View(new.data)
new.data
datmat <- expand.grid(Survived=1, Pclass=c(1,2,3), Sex=c('male', 'female'))
datmat
new.data <- data.frame(datmat)
new.data
fit2 <- glm(Survived ~ factor(Pclass) + factor(Sex),
data = train, family = binomial(link = "logit"))
new.data2 <- data.frame(expand.grid(Survived=1, Pclass=c(1,2,3), Sex=c('male', 'female')))
lp2 <- predict2(fit2, new.data2, se.fit = TRUE)
lp2 <- predict(fit2, new.data2, se.fit = TRUE)
summary(fit2)
coef2 <- coef(fit2)
exp(coef2[1] + coef2[4])
lp2
lp2 <- predict(fit2, new.data2)
lp2
cbind(new.data2,lp2)
lp2 <- predict(fit2, new.data2, type="response")
cbind(new.data2, lp2)
fit3 <- glm(Survived ~ factor(Pclass) + factor(Sex) + factor(Pclass):factor(Sex),
data = train, family = binomial(link = "logit"))
new.data3 <- data.frame(expand.grid(Survived=1, Pclass=c(1,2,3), Sex=c('male', 'female')))
lp3 <- predict(fit3, new.data3, type="response")
summary(fit3)
?read.csv
train$Pclass <- factor(train$Pclass)
fit3 <- glm(Survived ~ Pclass + Sex + Pclass:Sex,
data = train, family = binomial(link = "logit"))
new.data3 <- data.frame(expand.grid(Survived=1, Pclass=c(1,2,3), Sex=c('male', 'female')))
lp3 <- predict(fit3, new.data3, type="response")
summary(fit3)
summary(fit2)
fit2 <- glm(Survived ~ Pclass + Sex,
data = train, family = binomial(link = "logit"))
new.data2 <- data.frame(expand.grid(Survived=1, Pclass=c(1,2,3), Sex=c('male', 'female')))
lp2 <- predict(fit2, new.data2, type="response")
summary(fit2)
coef2 <- coef(fit2)
coef2
coef3
coef3 <- coef(fit3)
coef3
coef2
coef3
coef2[4]
c(coef3[4], coef3[4] + coef3[5:6])
coef3 <- coef(fit3)
lp3
cbind(new.data3, lp3)
lp3 <- predict(fit3, new.data3) #, type="response")
new.data3 <- data.frame(expand.grid(Survived=1, Pclass=c(1,2,3), Sex=c('male', 'female')))
lp3 <- predict(fit3, new.data3) #, type="response")
new.data3 <- data.frame(expand.grid(Survived=1, Pclass=factor(c(1,2,3)), Sex=c('male', 'female')))
lp3 <- predict(fit3, new.data3) #, type="response")
summary(fit3)
cbind(new.data3, lp3)
cbind(new.data3, round(lp3,4))
summary(fit3)
